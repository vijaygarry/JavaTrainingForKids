MiscHomework


1. Prime number program with break
2. Find number in array - break
3. Print all even number in array - Continue
4. Nested for loop
	Print * 
5. Create a method to find if given number is prime
6. Print all prime numbers between 25 and 1000
7. Create a class 




8. Buble sorting


3. Find number of time each word appears in paragraph. (Ignore case)
E.g. Is sentence is "The quick brown fox jumps over the lazy fox"
The - 2
quick - 1
brown - 1
fox - 2
jumps - 1
over -1 
lazy - 1


4. Reverse the sentence word by word:
E.g. Is sentence is "The quick brown fox"
Result should be: "fox brown quick The"


8. Find prime factor of number

9. Reverse character in String
E.g. If user input "Oreo", result should be "oerO"

Homework17:
------------------------
Create a array of 10 numbers. 
Sorting â€“ Write a method, which takes array of int and return array with sorted value (use buble sort).




Homework19:
------------------------
Create a class MathGame with following method:
presentProblem();
	This method will print the problem to user. This method should randonmly select one of the operation (+, -, *, /, or %).
	Now generate 2 random number. num1, num2. 
	Now show the question user like below:
					num1
			(op)	num2
			--------------

recordAnswer (int aAnswer);
boolean isRightAnswer();

Create MatchGameApp:
Create a array for MathGame.

Ask user 10 questions:
At the end, print the score. 

Problem					User Answer		Right Answer 		Result		
----------------------------------------------------------------------
1) num1 (op) num2 	= UserAnswer		Actual Answer 		Right/Wrong
2) num1 (op) num2 	= UserAnswer		Actual Answer 		Right/Wrong
.
.
10) num1 (op) num2 	= UserAnswer		Actual Answer 		Right/Wrong
----------------------------------------------------------------------
Total														5/10


Hint:
//Returns a random, uniformly distributed int value between 0 (inclusive) and the specified value (exclusive),
int rnd = new Random().nextInt(5);
e.g. 
int rndArrayIndex = new Random().nextInt(operationArray.length);

Random number for operation:
int rndNumber1 = new Random().nextInt(20);
int rndNumber2 = new Random().nextInt(20);






Himework22:
------------------------
Take 2 integer input from user.
Now find the Greatest Common Divisor (GCD).
GCD of two numbers is the largest positive integer number that divides both the numbers without leaving any remainder





Himework23:
------------------------
Define a array of 10 numbers. 
Print the mean (Average), Median, Mode, min, max for this array.

Mode
In statistics, the mode is the value in a data set that has the highest number of recurrences. It is possible for a data set to be multimodal, meaning that it has more than one mode. For example:

2,10,21,23,23,38,38
Both 23 and 38 appear twice each, making them both a mode for the data set above.


Median
The statistical concept of the median is a value that divides a data sample, population, or probability distribution into two halves. Finding the median essentially involves finding the value in a data sample that has a physical location between the rest of the numbers. Note that when calculating the median of a finite list of numbers, the order of the data samples is important. Conventionally, the values are listed in ascending order, but there is no real reason that listing the values in descending order would provide different results. In the case where the total number of values in a data sample is odd, the median is simply the number in the middle of the list of all values. When the data sample contains an even number of values, the median is the mean of the two middle values


Range
The range of a data set in statistics is the difference between the largest and the smallest values. While range does have different meanings within different areas of statistics and mathematics.
2,10,21,23,23,38,38
38 - 2 = 36





HW6_22
------------------------
Build tic tac toe game
Take player 1 and player 2 name.
Assign character 
X to player 1 
O to player 2



Ask player one to select cell number:
If cell number already selected, ask player to select another cell.
If player wins with this move, then print player won.
If player doesnot wins, ask other player to select cell.

After each move, refresh the screen and show the current moves

	1	|	2	|	3
		|		|
	X	|	X	|
---------------------------
	4	|	5	|	6
		|		|
	O	|		|
---------------------------
	7	|	8	|	9
		|		|
		|	O	|

If game over, ask if player wants to play again. If yes, start a new game.
Keep the count who wons how many games.

At the end, print the result.

Function to clear screen:
public static void clearScreen() {  
    for (int line =0; line < 50; line++) {
		System.out.println();
	}
} 
